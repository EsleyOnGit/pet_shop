comandos para subir os arquivos
cd /caminho/para/sua/pasta
git init
git add .
git remote add origin https://github.com/seu-usuario/nome-do-repositorio.git
git commit -m "Adicionando arquivos do projeto pet_shop"
git branch
Se sua branch principal se chama main:
git push -u origin main
Se der erro de branch (master vs main)
git branch -M main
Ou, se sua branch é master
git push -u origin master

-------------------------------//-------------------------------
validações com express-validator ou Joi
------------------------------------------------------------------
recomendações do chatgpt com express-validator
Criar ou atualizar o userController.js

import { validationResult } from "express-validator";

const Cadastrar = async (req, res) => {
  const erros = validationResult(req);
  if (!erros.isEmpty()) {
    return res.status(400).json({ erros: erros.array() });
  }

  // Simulação de cadastro (substitua por chamada ao service)
  const { nome, email, senha } = req.body;

  // Aqui você pode chamar seu service: userService.Cadastrar({ nome, email, senha })
  res.status(201).json({ message: "Usuário cadastrado com sucesso!", dados: { nome, email } });
};

export default { Cadastrar };

Atualizar userRoutes.js
import express from "express";
import userController from "../controller/userController.js";
import { validarCadastro } from "../validations/userValidation.js";

const router = express.Router();

router.post("/cadastro", validarCadastro, userController.Cadastrar);

export default router;
Testar com o Postman ou Insomnia
{
  "nome": "",
  "email": "invalido",
  "senha": "123"
}

Resposta esperada (400):
{
  "erros": [
    { "msg": "O nome é obrigatório", "param": "nome", ... },
    { "msg": "E-mail inválido", "param": "email", ... },
    { "msg": "A senha deve ter no mínimo 8 caracteres", "param": "senha", ... }
  ]
}

